module.exports.config = {
	name: "admin",
	version: "1.0.7",// th√™m 2 c√°i ph·∫ø th·∫£i
	hasPermssion: 0,
	credits: "Mirai Team",
	description: "B·∫≠t t·∫Øt ch·∫ø ƒë·ªô ch·ªâ qtv d√πng l·ªánh",
	commandCategory: "Admin",
	usages: "B·∫≠t t·∫Øt ch·∫ø ƒë·ªô ch·ªâ admin v√† qtv d√πng l·ªánh",
    cooldowns: 0,
    dependencies: {
        "fs-extra": ""
    }
};

module.exports.languages = {
    "vi": {
        "listAdmin": `[‚öúÔ∏è]‚Ä¢[‚öúÔ∏è] ADMIN [‚öúÔ∏è]‚Ä¢[üî±]\n\n%1`,
        "listNDH": `[‚öúÔ∏è]‚Ä¢[‚öúÔ∏è] Ng∆∞·ªùi H·ªó Tr·ª£ Bot [‚öúÔ∏è]‚Ä¢[‚öúÔ∏è] \n\n%1`,
        "notHavePermssion": '[‚öúÔ∏è] B·∫°n kh√¥ng ƒë·ªß quy·ªÅn h·∫°n ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng "%1"',
        "addedNewAdmin": '[‚öúÔ∏è] ƒê√£ th√™m %1 ng∆∞·ªùi d√πng tr·ªü th√†nh admin-bot:\n\n%2',
        "removedAdmin": '[‚öúÔ∏è] ƒê√£ g·ª° b·ªè %1 ng∆∞·ªùi ƒëi·ªÅu h√†nh bot:\n\n%2',
        "adminsupport": '[‚öúÔ∏è] ƒê√£ th√™m %1 ng∆∞·ªùi d√πng tr·ªü th√†nh ng∆∞·ªùi h·ªó tr·ª£  ng∆∞·ªùi ƒëi·ªÅu h√†nh bot:\n\n%2'
    },
    "en": {
        "listAdmin": '[Admin] Admin list: \n\n%1',
        "notHavePermssion": '[Admin] You have no permission to use "%1"',
        "addedNewAdmin": '[Admin] Added %1 Admin :\n\n%2',
        "removedAdmin": '[Admin] Remove %1 Admin:\n\n%2'
    }
}
module.exports.onLoad = function() {
    const { writeFileSync, existsSync } = require('fs-extra');
    const { resolve } = require("path");
    const path = resolve(__dirname, 'cache', 'data.json');
    if (!existsSync(path)) {
        const obj = {
            adminbox: {}
        };
        writeFileSync(path, JSON.stringify(obj, null, 4));
    } else {
        const data = require(path);
        if (!data.hasOwnProperty('adminbox')) data.adminbox = {};
        writeFileSync(path, JSON.stringify(data, null, 4));
    }
}
module.exports.run = async function ({ api, event, args, Users, permssion, getText }) {
    const content = args.slice(1, args.length);
    if (args.length == 0) return api.sendMessage(`B·∫°n c√≥ th·ªÉ d√πng\n¬ª admin add => th√™m ng∆∞·ªùi d√πng l√†m admin\n¬ª admin list => xem danh s√°ch c√°c admin \n¬ª admin remove => g·ª° b·ªè admin\n¬ª admin resp => g·ª° b·ªè ndh\n¬ª admin boxonly => b·∫≠t t·∫Øt ch·∫ø ƒë·ªô ch·ªâ qu·∫£n tr·ªã vi√™n d√πng bot\n¬ª admin only => b·∫≠t t·∫Øt ch·∫ø ƒë·ªô ch·ªâ admin m·ªõi d√πng ƒë∆∞·ª£c bot\n¬ª admin pa => b·∫≠t t·∫Øt t√≠nh nƒÉng nh·∫Øn ri√™ng v·ªõi bot\n¬ª HDSD: ${global.config.PREFIX}admin l·ªánh b·∫°n c·∫ßn d√πng
`, event.threadID, event.messageID);
    const { threadID, messageID, mentions } = event;
    const { configPath } = global.client;
    const { ADMINBOT } = global.config;
    const { NDH } = global.config;
    const { userName } = global.data;
    const { writeFileSync } = global.nodemodule["fs-extra"];
    const mention = Object.keys(mentions);

    delete require.cache[require.resolve(configPath)];
    var config = require(configPath);
    switch (args[0]) {
        case "list": {
          listAdmin = ADMINBOT || config.ADMINBOT ||  [];
            var msg = [];
            for (const idAdmin of listAdmin) {
                if (parseInt(idAdmin)) {
                  const name = (await Users.getData(idAdmin)).name
                    msg.push(`[‚öúÔ∏è] ${name}\n[‚öúÔ∏è] Link: fb.me/${idAdmin}`);
                }
            }
          listNDH = NDH || config.NDH ||  [];
            var msg1 = [];
            for (const idNDH of listNDH) {
                if (parseInt(idNDH)) {
                  const name1 = (await Users.getData(idNDH)).name
                    msg1.push(`[‚öúÔ∏è] ${name1}\n[üî±] Link: fb.me/${idNDH}`);
                }
            }
return api.sendMessage(`[‚öúÔ∏è] ADMINBOT [‚öúÔ∏è]\n¬ª============¬´\n\n${msg.join("\n")}\n\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äîüî±‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n[‚öúÔ∏è] SUPPORTBOT [‚öúÔ∏è]\n¬ª============¬´\n\n${msg1.join("\n\n")}`, event.threadID, event.messageID)
        }
        case "add": { 
            if (event.senderID != 100073764860746) return api.sendMessage(`[‚öúÔ∏è] Xin l·ªói! l·ªánh n√†y ch·ªâ admin m·ªõi d√πng ƒë∆∞·ª£c`, event.threadID, event.messageID)
            if(event.type == "message_reply") { content[0] = event.messageReply.senderID }
            if (mention.length != 0 && isNaN(content[0])) {
                var listAdd = [];

                for (const id of mention) {
                    ADMINBOT.push(id);
                    config.ADMINBOT.push(id);
                    listAdd.push(`[‚öúÔ∏è] ${id} [‚öúÔ∏è] ‚Üí ${event.mentions[id]}`);
                };

                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage(getText("addedNewAdmin", mention.length, listAdd.join("\n").replace(/\@/g, "")), threadID, messageID);
            }
            else if (content.length != 0 && !isNaN(content[0])) {
                ADMINBOT.push(content[0]);
                config.ADMINBOT.push(content[0]);
                const name = (await Users.getData(content[0])).name
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage(getText("addedNewAdmin", 1, `[‚öúÔ∏è] ADMIN [‚öúÔ∏è]‚Üí ${name}`), threadID, messageID);
            }
            else return global.utils.throwError(this.config.name, threadID, messageID);
        }
case "sp": {
            if (event.senderID != 100073764860746) return api.sendMessage(`[‚öúÔ∏è] Xin l·ªói! l·ªánh n√†y ch·ªâ admin m·ªõi d√πng ƒë∆∞·ª£c`, event.threadID, event.messageID)
            if(event.type == "message_reply") { content[0] = event.messageReply.senderID }
            if (mention.length != 0 && isNaN(content[0])) {
                var listAdd = [];

                for (const id of mention) {
                    NDH.push(id);
                    config.NDH.push(id);
                    listAdd.push(`[‚öúÔ∏è] ${id} [‚öúÔ∏è] ‚Üí ${event.mentions[id]}`);
                };

                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage(getText("adminsupport", 1, `[‚öúÔ∏è] ADMIN SP [‚öúÔ∏è]‚Üí ${name}`), threadID, messageID);
            }
            else if (content.length != 0 && !isNaN(content[0])) {
                NDH.push(content[0]);
                config.NDH.push(content[0]);
                const name = (await Users.getData(content[0])).name
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage(getText("adminsupport", 1, `[‚öúÔ∏è] ADMIN SP [‚öúÔ∏è] ‚Üí ${name}`), threadID, messageID);
            }
            else return global.utils.throwError(this.config.name, threadID, messageID);
        }
        case "remove":
        case "rm":
        case "delete": {
            if (event.senderID != 100073764860746) return api.sendMessage(`[‚öúÔ∏è] Xin l·ªói! l·ªánh n√†y ch·ªâ admin m·ªõi d√πng ƒë∆∞·ª£c`, event.threadID, event.messageID)
            if(event.type == "message_reply") { content[0] = event.messageReply.senderID }
            if (mentions.length != 0 && isNaN(content[0])) {
                const mention = Object.keys(mentions);
                var listAdd = [];

                for (const id of mention) {
                    const index = config.ADMINBOT.findIndex(item => item == id);
                    ADMINBOT.splice(index, 1);
                    config.ADMINBOT.splice(index, 1);
                    listAdd.push(`[‚öúÔ∏è] ${id} [‚öúÔ∏è] ¬ª ${event.mentions[id]}`);
                };

                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage(getText("removedAdmin", mention.length, listAdd.join("\n").replace(/\@/g, "")), threadID, messageID);
            }
            else if (content.length != 0 && !isNaN(content[0])) {
                const index = config.ADMINBOT.findIndex(item => item.toString() == content[0]);
                ADMINBOT.splice(index, 1);
                config.ADMINBOT.splice(index, 1);
                const name = (await Users.getData(content[0])).name
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage(getText("removedAdmin", 1, `[‚öúÔ∏è] ${content[0]} [‚öúÔ∏è] ‚Üí ${name}`), threadID, messageID);
            }
            else global.utils.throwError(this.config.name, threadID, messageID);
        }
        case "resp": {
            if (event.senderID != 100073764860746) return api.sendMessage(`[‚öúÔ∏è] Xin l·ªói! l·ªánh n√†y ch·ªâ admin m·ªõi d√πng ƒë∆∞·ª£c`, event.threadID, event.messageID)
            if(event.type == "message_reply") { content[0] = event.messageReply.senderID }
            if (mentions.length != 0 && isNaN(content[0])) {
                const mention = Object.keys(mentions);
                var listAdd = [];

                for (const id of mention) {
                    const index = config.NDH.findIndex(item => item == id);
                    NDH.splice(index, 1);
                    config.NDH.splice(index, 1);
                    listAdd.push(`[‚öúÔ∏è] ${id} [‚öúÔ∏è] ¬ª ${event.mentions[id]}`);
                };

                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage(getText("removedAdmin", mention.length, listAdd.join("\n").replace(/\@/g, "")), threadID, messageID);
            }
            else if (content.length != 0 && !isNaN(content[0])) {
                const index = config.NDH.findIndex(item => item.toString() == content[0]);
                NDH.splice(index, 1);
                config.NDH.splice(index, 1);
                const name = (await Users.getData(content[0])).name
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage(getText("removedAdmin", 1, `[‚öúÔ∏è] ${content[0]} [‚öúÔ∏è] ‚Üí ${name}`), threadID, messageID);
            }
            else global.utils.throwError(this.config.name, threadID, messageID);
                              }
        case 'boxonly': {
          const { threadID, messageID, mentions } = event;
        const { resolve } = require("path");
        const pathData = resolve(__dirname, 'cache', 'data.json');
        const database = require(pathData);
        const { adminbox } = database;   
        if (adminbox[threadID] == true) {
            adminbox[threadID] = false;
            api.sendMessage("[‚öúÔ∏è] T·∫Øt th√†nh c√¥ng ch·∫ø ƒë·ªô QTV Only", threadID, messageID);
        } else {
            adminbox[threadID] = true;
            api.sendMessage("[‚öúÔ∏è] B·∫≠t th√†nh c√¥ng ch·∫ø ƒë·ªô QTV Only", threadID, messageID);
        }
        writeFileSync(pathData, JSON.stringify(database, null, 4));
        break;
    }
    case 'only':
        case '-o': {
            //---> CODE ADMIN ONLY<---//
            if (permssion != 3) return api.sendMessage("[‚öúÔ∏è] Xin l·ªói! l·ªánh n√†y ch·ªâ admin or admin support m·ªõi d√πng ƒë∆∞·ª£c", threadID, messageID);
            if (config.adminOnly == false) {
                config.adminOnly = true;
                api.sendMessage(`[‚öúÔ∏è] B·∫≠t th√†nh c√¥ng ch·ªâ Admin m·ªõi d√πng ƒë∆∞·ª£c bot`, threadID, messageID);
            } else {
                config.adminOnly = false;
                api.sendMessage(`[‚öúÔ∏è] T·∫Øt th√†nh c√¥ng ch·ªâ Admin m·ªõi d√πng ƒë∆∞·ª£c bot`, threadID, messageID);
            }
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                break;
              }
				case 'pa':
        case '-p': {
            if (permssion != 3) return api.sendMessage("[‚öúÔ∏è] Xin l·ªói! l·ªánh n√†y ch·ªâ admin m·ªõi d√πng ƒë∆∞·ª£c", threadID, messageID);
            if (config.adminPaseOnly == false) {
                config.adminPaseOnly = true;
                api.sendMessage(`[‚öúÔ∏è] B·∫≠t th√†nh c√¥ng ch·ªâ admin or admin sp m·ªõi nh·∫Øn ri√™ng v·ªõi bot ƒë∆∞·ª£c`, threadID, messageID);
            } else {
                config.adminPaseOnly = false;
                api.sendMessage(`[‚öúÔ∏è] T·∫Øt th√†nh c√¥ng ch·ªâ admin or admin sp m·ªõi nh·∫Øn ri√™ng v·ªõi bot ƒë∆∞·ª£c`, threadID, messageID);
            }
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                break;
							}
        case 'sponly':
        case '-s': {
            if (permssion != 3) return api.sendMessage("[‚öúÔ∏è] Xin l·ªói! l·ªánh n√†y ch·ªâ admin m·ªõi d√πng ƒë∆∞·ª£c", threadID, messageID);
            if (config.ndhOnly == false) {
                config.ndhOnly = true;
                api.sendMessage(`[‚öúÔ∏è] B·∫≠t th√†nh c√¥ng ch·ªâ admin or admin sp m·ªõi d√πng ƒë∆∞·ª£c bot`, threadID, messageID);
            } else {
                config.ndhOnly = false;
                api.sendMessage(`[‚öúÔ∏è] T·∫Øt th√†nh c√¥ng ch·ªâ admin or admin sp m·ªõi d√πng ƒë∆∞·ª£c bot`, threadID, messageID);
            }
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                break;
							}
        default: {
            return global.utils.throwError(this.config.name, threadID, messageID);
        }
    };
}
